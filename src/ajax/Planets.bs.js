// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                      = require("bs-platform/lib/js/list.js");
var $$Array                   = require("bs-platform/lib/js/array.js");
var Block                     = require("bs-platform/lib/js/block.js");
var Curry                     = require("bs-platform/lib/js/curry.js");
var React                     = require("react");
var ReasonReact               = require("reason-react/src/ReasonReact.js");
var PlanetsData$ReactTemplate = require("./PlanetsData.bs.js");

var component = ReasonReact.reducerComponent("Planets");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      var handlePlanetsLoaded = Curry._1(self[/* reduce */1], (function (planets) {
              return /* Result */[planets];
            }));
      var handleError = Curry._1(self[/* reduce */1], (function () {
              return /* Failure */1;
            }));
      PlanetsData$ReactTemplate.fetchPlanets(/* () */0).then((function (planets) {
                Curry._1(handlePlanetsLoaded, planets);
                return Promise.resolve(/* () */0);
              })).catch((function () {
              Curry._1(handleError, /* () */0);
              return Promise.resolve(/* () */0);
            }));
      return /* Update */Block.__(0, [/* record */[/* planets : Pending */1]]);
    });
  newrecord[/* render */9] = (function (self) {
      var match = self[/* state */2][/* planets */0];
      var planets;
      planets = typeof match === "number" ? (
          match ? "Loading" : ""
        ) : (
          match.tag ? match[0] : $$Array.of_list(List.map((function (p) {
                        return React.createElement("div", {
                                    key: p[/* name */0]
                                  }, p[/* name */0]);
                      }), match[0]))
        );
      return React.createElement("div", {
                  className: "Planets-list"
                }, React.createElement("h1", undefined, "Reason Planets"), planets);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* planets : NotAsked */0];
    });
  newrecord[/* reducer */12] = (function (action, _) {
      if (typeof action === "number") {
        if (action !== 0) {
          return /* Update */Block.__(0, [/* record */[/* planets : Error */Block.__(1, ["Error loading the planets"])]]);
        } else {
          return /* Update */Block.__(0, [/* record */[/* planets : Pending */1]]);
        }
      } else {
        return /* Update */Block.__(0, [/* record */[/* planets : Success */Block.__(0, [action[0]])]]);
      }
    });
  return newrecord;
}

exports.component = component;
exports.make      = make;
/* component Not a pure module */
